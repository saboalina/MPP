/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package domain;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-04-18")
public class Flight implements org.apache.thrift.TBase<Flight, Flight._Fields>, java.io.Serializable, Cloneable, Comparable<Flight> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Flight");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DESTINATION_FIELD_DESC = new org.apache.thrift.protocol.TField("destination", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DEPARTURE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("departureDate", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DEPARTURE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("departureTime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField AIRPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("airport", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField AVAILABLE_SEATS_FIELD_DESC = new org.apache.thrift.protocol.TField("availableSeats", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FlightStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FlightTupleSchemeFactory();

  public int id; // required
  public @org.apache.thrift.annotation.Nullable String destination; // required
  public @org.apache.thrift.annotation.Nullable String departureDate; // required
  public @org.apache.thrift.annotation.Nullable String departureTime; // required
  public @org.apache.thrift.annotation.Nullable String airport; // required
  public int availableSeats; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    DESTINATION((short)2, "destination"),
    DEPARTURE_DATE((short)3, "departureDate"),
    DEPARTURE_TIME((short)4, "departureTime"),
    AIRPORT((short)5, "airport"),
    AVAILABLE_SEATS((short)6, "availableSeats");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // DESTINATION
          return DESTINATION;
        case 3: // DEPARTURE_DATE
          return DEPARTURE_DATE;
        case 4: // DEPARTURE_TIME
          return DEPARTURE_TIME;
        case 5: // AIRPORT
          return AIRPORT;
        case 6: // AVAILABLE_SEATS
          return AVAILABLE_SEATS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __AVAILABLESEATS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DESTINATION, new org.apache.thrift.meta_data.FieldMetaData("destination", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPARTURE_DATE, new org.apache.thrift.meta_data.FieldMetaData("departureDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPARTURE_TIME, new org.apache.thrift.meta_data.FieldMetaData("departureTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AIRPORT, new org.apache.thrift.meta_data.FieldMetaData("airport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AVAILABLE_SEATS, new org.apache.thrift.meta_data.FieldMetaData("availableSeats", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Flight.class, metaDataMap);
  }

  public Flight() {
  }

  public Flight(
    int id,
    String destination,
    String departureDate,
    String departureTime,
    String airport,
    int availableSeats)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.destination = destination;
    this.departureDate = departureDate;
    this.departureTime = departureTime;
    this.airport = airport;
    this.availableSeats = availableSeats;
    setAvailableSeatsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Flight(Flight other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetDestination()) {
      this.destination = other.destination;
    }
    if (other.isSetDepartureDate()) {
      this.departureDate = other.departureDate;
    }
    if (other.isSetDepartureTime()) {
      this.departureTime = other.departureTime;
    }
    if (other.isSetAirport()) {
      this.airport = other.airport;
    }
    this.availableSeats = other.availableSeats;
  }

  public Flight deepCopy() {
    return new Flight(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.destination = null;
    this.departureDate = null;
    this.departureTime = null;
    this.airport = null;
    setAvailableSeatsIsSet(false);
    this.availableSeats = 0;
  }

  public int getId() {
    return this.id;
  }

  public Flight setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getDestination() {
    return this.destination;
  }

  public Flight setDestination(@org.apache.thrift.annotation.Nullable String destination) {
    this.destination = destination;
    return this;
  }

  public void unsetDestination() {
    this.destination = null;
  }

  /** Returns true if field destination is set (has been assigned a value) and false otherwise */
  public boolean isSetDestination() {
    return this.destination != null;
  }

  public void setDestinationIsSet(boolean value) {
    if (!value) {
      this.destination = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getDepartureDate() {
    return this.departureDate;
  }

  public Flight setDepartureDate(@org.apache.thrift.annotation.Nullable String departureDate) {
    this.departureDate = departureDate;
    return this;
  }

  public void unsetDepartureDate() {
    this.departureDate = null;
  }

  /** Returns true if field departureDate is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartureDate() {
    return this.departureDate != null;
  }

  public void setDepartureDateIsSet(boolean value) {
    if (!value) {
      this.departureDate = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getDepartureTime() {
    return this.departureTime;
  }

  public Flight setDepartureTime(@org.apache.thrift.annotation.Nullable String departureTime) {
    this.departureTime = departureTime;
    return this;
  }

  public void unsetDepartureTime() {
    this.departureTime = null;
  }

  /** Returns true if field departureTime is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartureTime() {
    return this.departureTime != null;
  }

  public void setDepartureTimeIsSet(boolean value) {
    if (!value) {
      this.departureTime = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getAirport() {
    return this.airport;
  }

  public Flight setAirport(@org.apache.thrift.annotation.Nullable String airport) {
    this.airport = airport;
    return this;
  }

  public void unsetAirport() {
    this.airport = null;
  }

  /** Returns true if field airport is set (has been assigned a value) and false otherwise */
  public boolean isSetAirport() {
    return this.airport != null;
  }

  public void setAirportIsSet(boolean value) {
    if (!value) {
      this.airport = null;
    }
  }

  public int getAvailableSeats() {
    return this.availableSeats;
  }

  public Flight setAvailableSeats(int availableSeats) {
    this.availableSeats = availableSeats;
    setAvailableSeatsIsSet(true);
    return this;
  }

  public void unsetAvailableSeats() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AVAILABLESEATS_ISSET_ID);
  }

  /** Returns true if field availableSeats is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailableSeats() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AVAILABLESEATS_ISSET_ID);
  }

  public void setAvailableSeatsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AVAILABLESEATS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case DESTINATION:
      if (value == null) {
        unsetDestination();
      } else {
        setDestination((String)value);
      }
      break;

    case DEPARTURE_DATE:
      if (value == null) {
        unsetDepartureDate();
      } else {
        setDepartureDate((String)value);
      }
      break;

    case DEPARTURE_TIME:
      if (value == null) {
        unsetDepartureTime();
      } else {
        setDepartureTime((String)value);
      }
      break;

    case AIRPORT:
      if (value == null) {
        unsetAirport();
      } else {
        setAirport((String)value);
      }
      break;

    case AVAILABLE_SEATS:
      if (value == null) {
        unsetAvailableSeats();
      } else {
        setAvailableSeats((Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case DESTINATION:
      return getDestination();

    case DEPARTURE_DATE:
      return getDepartureDate();

    case DEPARTURE_TIME:
      return getDepartureTime();

    case AIRPORT:
      return getAirport();

    case AVAILABLE_SEATS:
      return getAvailableSeats();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case DESTINATION:
      return isSetDestination();
    case DEPARTURE_DATE:
      return isSetDepartureDate();
    case DEPARTURE_TIME:
      return isSetDepartureTime();
    case AIRPORT:
      return isSetAirport();
    case AVAILABLE_SEATS:
      return isSetAvailableSeats();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof Flight)
      return this.equals((Flight)that);
    return false;
  }

  public boolean equals(Flight that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_destination = true && this.isSetDestination();
    boolean that_present_destination = true && that.isSetDestination();
    if (this_present_destination || that_present_destination) {
      if (!(this_present_destination && that_present_destination))
        return false;
      if (!this.destination.equals(that.destination))
        return false;
    }

    boolean this_present_departureDate = true && this.isSetDepartureDate();
    boolean that_present_departureDate = true && that.isSetDepartureDate();
    if (this_present_departureDate || that_present_departureDate) {
      if (!(this_present_departureDate && that_present_departureDate))
        return false;
      if (!this.departureDate.equals(that.departureDate))
        return false;
    }

    boolean this_present_departureTime = true && this.isSetDepartureTime();
    boolean that_present_departureTime = true && that.isSetDepartureTime();
    if (this_present_departureTime || that_present_departureTime) {
      if (!(this_present_departureTime && that_present_departureTime))
        return false;
      if (!this.departureTime.equals(that.departureTime))
        return false;
    }

    boolean this_present_airport = true && this.isSetAirport();
    boolean that_present_airport = true && that.isSetAirport();
    if (this_present_airport || that_present_airport) {
      if (!(this_present_airport && that_present_airport))
        return false;
      if (!this.airport.equals(that.airport))
        return false;
    }

    boolean this_present_availableSeats = true;
    boolean that_present_availableSeats = true;
    if (this_present_availableSeats || that_present_availableSeats) {
      if (!(this_present_availableSeats && that_present_availableSeats))
        return false;
      if (this.availableSeats != that.availableSeats)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetDestination()) ? 131071 : 524287);
    if (isSetDestination())
      hashCode = hashCode * 8191 + destination.hashCode();

    hashCode = hashCode * 8191 + ((isSetDepartureDate()) ? 131071 : 524287);
    if (isSetDepartureDate())
      hashCode = hashCode * 8191 + departureDate.hashCode();

    hashCode = hashCode * 8191 + ((isSetDepartureTime()) ? 131071 : 524287);
    if (isSetDepartureTime())
      hashCode = hashCode * 8191 + departureTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetAirport()) ? 131071 : 524287);
    if (isSetAirport())
      hashCode = hashCode * 8191 + airport.hashCode();

    hashCode = hashCode * 8191 + availableSeats;

    return hashCode;
  }

  @Override
  public int compareTo(Flight other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetId(), other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetDestination(), other.isSetDestination());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestination()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destination, other.destination);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetDepartureDate(), other.isSetDepartureDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartureDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departureDate, other.departureDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetDepartureTime(), other.isSetDepartureTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartureTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departureTime, other.departureTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetAirport(), other.isSetAirport());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAirport()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airport, other.airport);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetAvailableSeats(), other.isSetAvailableSeats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailableSeats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.availableSeats, other.availableSeats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Flight(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("destination:");
    if (this.destination == null) {
      sb.append("null");
    } else {
      sb.append(this.destination);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("departureDate:");
    if (this.departureDate == null) {
      sb.append("null");
    } else {
      sb.append(this.departureDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("departureTime:");
    if (this.departureTime == null) {
      sb.append("null");
    } else {
      sb.append(this.departureTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("airport:");
    if (this.airport == null) {
      sb.append("null");
    } else {
      sb.append(this.airport);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("availableSeats:");
    sb.append(this.availableSeats);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FlightStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FlightStandardScheme getScheme() {
      return new FlightStandardScheme();
    }
  }

  private static class FlightStandardScheme extends org.apache.thrift.scheme.StandardScheme<Flight> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Flight struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DESTINATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.destination = iprot.readString();
              struct.setDestinationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEPARTURE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.departureDate = iprot.readString();
              struct.setDepartureDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEPARTURE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.departureTime = iprot.readString();
              struct.setDepartureTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AIRPORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.airport = iprot.readString();
              struct.setAirportIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AVAILABLE_SEATS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.availableSeats = iprot.readI32();
              struct.setAvailableSeatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Flight struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.destination != null) {
        oprot.writeFieldBegin(DESTINATION_FIELD_DESC);
        oprot.writeString(struct.destination);
        oprot.writeFieldEnd();
      }
      if (struct.departureDate != null) {
        oprot.writeFieldBegin(DEPARTURE_DATE_FIELD_DESC);
        oprot.writeString(struct.departureDate);
        oprot.writeFieldEnd();
      }
      if (struct.departureTime != null) {
        oprot.writeFieldBegin(DEPARTURE_TIME_FIELD_DESC);
        oprot.writeString(struct.departureTime);
        oprot.writeFieldEnd();
      }
      if (struct.airport != null) {
        oprot.writeFieldBegin(AIRPORT_FIELD_DESC);
        oprot.writeString(struct.airport);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AVAILABLE_SEATS_FIELD_DESC);
      oprot.writeI32(struct.availableSeats);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FlightTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FlightTupleScheme getScheme() {
      return new FlightTupleScheme();
    }
  }

  private static class FlightTupleScheme extends org.apache.thrift.scheme.TupleScheme<Flight> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Flight struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetDestination()) {
        optionals.set(1);
      }
      if (struct.isSetDepartureDate()) {
        optionals.set(2);
      }
      if (struct.isSetDepartureTime()) {
        optionals.set(3);
      }
      if (struct.isSetAirport()) {
        optionals.set(4);
      }
      if (struct.isSetAvailableSeats()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetDestination()) {
        oprot.writeString(struct.destination);
      }
      if (struct.isSetDepartureDate()) {
        oprot.writeString(struct.departureDate);
      }
      if (struct.isSetDepartureTime()) {
        oprot.writeString(struct.departureTime);
      }
      if (struct.isSetAirport()) {
        oprot.writeString(struct.airport);
      }
      if (struct.isSetAvailableSeats()) {
        oprot.writeI32(struct.availableSeats);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Flight struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.destination = iprot.readString();
        struct.setDestinationIsSet(true);
      }
      if (incoming.get(2)) {
        struct.departureDate = iprot.readString();
        struct.setDepartureDateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.departureTime = iprot.readString();
        struct.setDepartureTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.airport = iprot.readString();
        struct.setAirportIsSet(true);
      }
      if (incoming.get(5)) {
        struct.availableSeats = iprot.readI32();
        struct.setAvailableSeatsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

