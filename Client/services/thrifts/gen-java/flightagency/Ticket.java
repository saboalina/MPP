/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package flightagency;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2021-04-19")
public class Ticket implements org.apache.thrift.TBase<Ticket, Ticket._Fields>, java.io.Serializable, Cloneable, Comparable<Ticket> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Ticket");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clientName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TOURISTS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("touristsName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CLIENT_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("clientAddress", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField NO_SEATS_FIELD_DESC = new org.apache.thrift.protocol.TField("noSeats", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField FLIGHT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("flightId", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TicketStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TicketTupleSchemeFactory();

  public int id; // required
  public java.lang.String clientName; // required
  public java.lang.String touristsName; // required
  public java.lang.String clientAddress; // required
  public int noSeats; // required
  public int flightId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CLIENT_NAME((short)2, "clientName"),
    TOURISTS_NAME((short)3, "touristsName"),
    CLIENT_ADDRESS((short)4, "clientAddress"),
    NO_SEATS((short)5, "noSeats"),
    FLIGHT_ID((short)6, "flightId");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CLIENT_NAME
          return CLIENT_NAME;
        case 3: // TOURISTS_NAME
          return TOURISTS_NAME;
        case 4: // CLIENT_ADDRESS
          return CLIENT_ADDRESS;
        case 5: // NO_SEATS
          return NO_SEATS;
        case 6: // FLIGHT_ID
          return FLIGHT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __NOSEATS_ISSET_ID = 1;
  private static final int __FLIGHTID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLIENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("clientName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOURISTS_NAME, new org.apache.thrift.meta_data.FieldMetaData("touristsName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("clientAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NO_SEATS, new org.apache.thrift.meta_data.FieldMetaData("noSeats", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FLIGHT_ID, new org.apache.thrift.meta_data.FieldMetaData("flightId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Ticket.class, metaDataMap);
  }

  public Ticket() {
  }

  public Ticket(
    int id,
    java.lang.String clientName,
    java.lang.String touristsName,
    java.lang.String clientAddress,
    int noSeats,
    int flightId)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.clientName = clientName;
    this.touristsName = touristsName;
    this.clientAddress = clientAddress;
    this.noSeats = noSeats;
    setNoSeatsIsSet(true);
    this.flightId = flightId;
    setFlightIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Ticket(Ticket other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetClientName()) {
      this.clientName = other.clientName;
    }
    if (other.isSetTouristsName()) {
      this.touristsName = other.touristsName;
    }
    if (other.isSetClientAddress()) {
      this.clientAddress = other.clientAddress;
    }
    this.noSeats = other.noSeats;
    this.flightId = other.flightId;
  }

  public Ticket deepCopy() {
    return new Ticket(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.clientName = null;
    this.touristsName = null;
    this.clientAddress = null;
    setNoSeatsIsSet(false);
    this.noSeats = 0;
    setFlightIdIsSet(false);
    this.flightId = 0;
  }

  public int getId() {
    return this.id;
  }

  public Ticket setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getClientName() {
    return this.clientName;
  }

  public Ticket setClientName(java.lang.String clientName) {
    this.clientName = clientName;
    return this;
  }

  public void unsetClientName() {
    this.clientName = null;
  }

  /** Returns true if field clientName is set (has been assigned a value) and false otherwise */
  public boolean isSetClientName() {
    return this.clientName != null;
  }

  public void setClientNameIsSet(boolean value) {
    if (!value) {
      this.clientName = null;
    }
  }

  public java.lang.String getTouristsName() {
    return this.touristsName;
  }

  public Ticket setTouristsName(java.lang.String touristsName) {
    this.touristsName = touristsName;
    return this;
  }

  public void unsetTouristsName() {
    this.touristsName = null;
  }

  /** Returns true if field touristsName is set (has been assigned a value) and false otherwise */
  public boolean isSetTouristsName() {
    return this.touristsName != null;
  }

  public void setTouristsNameIsSet(boolean value) {
    if (!value) {
      this.touristsName = null;
    }
  }

  public java.lang.String getClientAddress() {
    return this.clientAddress;
  }

  public Ticket setClientAddress(java.lang.String clientAddress) {
    this.clientAddress = clientAddress;
    return this;
  }

  public void unsetClientAddress() {
    this.clientAddress = null;
  }

  /** Returns true if field clientAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetClientAddress() {
    return this.clientAddress != null;
  }

  public void setClientAddressIsSet(boolean value) {
    if (!value) {
      this.clientAddress = null;
    }
  }

  public int getNoSeats() {
    return this.noSeats;
  }

  public Ticket setNoSeats(int noSeats) {
    this.noSeats = noSeats;
    setNoSeatsIsSet(true);
    return this;
  }

  public void unsetNoSeats() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOSEATS_ISSET_ID);
  }

  /** Returns true if field noSeats is set (has been assigned a value) and false otherwise */
  public boolean isSetNoSeats() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOSEATS_ISSET_ID);
  }

  public void setNoSeatsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOSEATS_ISSET_ID, value);
  }

  public int getFlightId() {
    return this.flightId;
  }

  public Ticket setFlightId(int flightId) {
    this.flightId = flightId;
    setFlightIdIsSet(true);
    return this;
  }

  public void unsetFlightId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLIGHTID_ISSET_ID);
  }

  /** Returns true if field flightId is set (has been assigned a value) and false otherwise */
  public boolean isSetFlightId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLIGHTID_ISSET_ID);
  }

  public void setFlightIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLIGHTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case CLIENT_NAME:
      if (value == null) {
        unsetClientName();
      } else {
        setClientName((java.lang.String)value);
      }
      break;

    case TOURISTS_NAME:
      if (value == null) {
        unsetTouristsName();
      } else {
        setTouristsName((java.lang.String)value);
      }
      break;

    case CLIENT_ADDRESS:
      if (value == null) {
        unsetClientAddress();
      } else {
        setClientAddress((java.lang.String)value);
      }
      break;

    case NO_SEATS:
      if (value == null) {
        unsetNoSeats();
      } else {
        setNoSeats((java.lang.Integer)value);
      }
      break;

    case FLIGHT_ID:
      if (value == null) {
        unsetFlightId();
      } else {
        setFlightId((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case CLIENT_NAME:
      return getClientName();

    case TOURISTS_NAME:
      return getTouristsName();

    case CLIENT_ADDRESS:
      return getClientAddress();

    case NO_SEATS:
      return getNoSeats();

    case FLIGHT_ID:
      return getFlightId();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CLIENT_NAME:
      return isSetClientName();
    case TOURISTS_NAME:
      return isSetTouristsName();
    case CLIENT_ADDRESS:
      return isSetClientAddress();
    case NO_SEATS:
      return isSetNoSeats();
    case FLIGHT_ID:
      return isSetFlightId();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Ticket)
      return this.equals((Ticket)that);
    return false;
  }

  public boolean equals(Ticket that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_clientName = true && this.isSetClientName();
    boolean that_present_clientName = true && that.isSetClientName();
    if (this_present_clientName || that_present_clientName) {
      if (!(this_present_clientName && that_present_clientName))
        return false;
      if (!this.clientName.equals(that.clientName))
        return false;
    }

    boolean this_present_touristsName = true && this.isSetTouristsName();
    boolean that_present_touristsName = true && that.isSetTouristsName();
    if (this_present_touristsName || that_present_touristsName) {
      if (!(this_present_touristsName && that_present_touristsName))
        return false;
      if (!this.touristsName.equals(that.touristsName))
        return false;
    }

    boolean this_present_clientAddress = true && this.isSetClientAddress();
    boolean that_present_clientAddress = true && that.isSetClientAddress();
    if (this_present_clientAddress || that_present_clientAddress) {
      if (!(this_present_clientAddress && that_present_clientAddress))
        return false;
      if (!this.clientAddress.equals(that.clientAddress))
        return false;
    }

    boolean this_present_noSeats = true;
    boolean that_present_noSeats = true;
    if (this_present_noSeats || that_present_noSeats) {
      if (!(this_present_noSeats && that_present_noSeats))
        return false;
      if (this.noSeats != that.noSeats)
        return false;
    }

    boolean this_present_flightId = true;
    boolean that_present_flightId = true;
    if (this_present_flightId || that_present_flightId) {
      if (!(this_present_flightId && that_present_flightId))
        return false;
      if (this.flightId != that.flightId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetClientName()) ? 131071 : 524287);
    if (isSetClientName())
      hashCode = hashCode * 8191 + clientName.hashCode();

    hashCode = hashCode * 8191 + ((isSetTouristsName()) ? 131071 : 524287);
    if (isSetTouristsName())
      hashCode = hashCode * 8191 + touristsName.hashCode();

    hashCode = hashCode * 8191 + ((isSetClientAddress()) ? 131071 : 524287);
    if (isSetClientAddress())
      hashCode = hashCode * 8191 + clientAddress.hashCode();

    hashCode = hashCode * 8191 + noSeats;

    hashCode = hashCode * 8191 + flightId;

    return hashCode;
  }

  @Override
  public int compareTo(Ticket other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClientName()).compareTo(other.isSetClientName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientName, other.clientName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTouristsName()).compareTo(other.isSetTouristsName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTouristsName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.touristsName, other.touristsName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClientAddress()).compareTo(other.isSetClientAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientAddress, other.clientAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNoSeats()).compareTo(other.isSetNoSeats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoSeats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noSeats, other.noSeats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFlightId()).compareTo(other.isSetFlightId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlightId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flightId, other.flightId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Ticket(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientName:");
    if (this.clientName == null) {
      sb.append("null");
    } else {
      sb.append(this.clientName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("touristsName:");
    if (this.touristsName == null) {
      sb.append("null");
    } else {
      sb.append(this.touristsName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientAddress:");
    if (this.clientAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.clientAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("noSeats:");
    sb.append(this.noSeats);
    first = false;
    if (!first) sb.append(", ");
    sb.append("flightId:");
    sb.append(this.flightId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TicketStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TicketStandardScheme getScheme() {
      return new TicketStandardScheme();
    }
  }

  private static class TicketStandardScheme extends org.apache.thrift.scheme.StandardScheme<Ticket> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Ticket struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientName = iprot.readString();
              struct.setClientNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOURISTS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.touristsName = iprot.readString();
              struct.setTouristsNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CLIENT_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientAddress = iprot.readString();
              struct.setClientAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NO_SEATS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.noSeats = iprot.readI32();
              struct.setNoSeatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FLIGHT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.flightId = iprot.readI32();
              struct.setFlightIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Ticket struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.clientName != null) {
        oprot.writeFieldBegin(CLIENT_NAME_FIELD_DESC);
        oprot.writeString(struct.clientName);
        oprot.writeFieldEnd();
      }
      if (struct.touristsName != null) {
        oprot.writeFieldBegin(TOURISTS_NAME_FIELD_DESC);
        oprot.writeString(struct.touristsName);
        oprot.writeFieldEnd();
      }
      if (struct.clientAddress != null) {
        oprot.writeFieldBegin(CLIENT_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.clientAddress);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NO_SEATS_FIELD_DESC);
      oprot.writeI32(struct.noSeats);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FLIGHT_ID_FIELD_DESC);
      oprot.writeI32(struct.flightId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TicketTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TicketTupleScheme getScheme() {
      return new TicketTupleScheme();
    }
  }

  private static class TicketTupleScheme extends org.apache.thrift.scheme.TupleScheme<Ticket> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Ticket struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetClientName()) {
        optionals.set(1);
      }
      if (struct.isSetTouristsName()) {
        optionals.set(2);
      }
      if (struct.isSetClientAddress()) {
        optionals.set(3);
      }
      if (struct.isSetNoSeats()) {
        optionals.set(4);
      }
      if (struct.isSetFlightId()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetClientName()) {
        oprot.writeString(struct.clientName);
      }
      if (struct.isSetTouristsName()) {
        oprot.writeString(struct.touristsName);
      }
      if (struct.isSetClientAddress()) {
        oprot.writeString(struct.clientAddress);
      }
      if (struct.isSetNoSeats()) {
        oprot.writeI32(struct.noSeats);
      }
      if (struct.isSetFlightId()) {
        oprot.writeI32(struct.flightId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Ticket struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clientName = iprot.readString();
        struct.setClientNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.touristsName = iprot.readString();
        struct.setTouristsNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.clientAddress = iprot.readString();
        struct.setClientAddressIsSet(true);
      }
      if (incoming.get(4)) {
        struct.noSeats = iprot.readI32();
        struct.setNoSeatsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.flightId = iprot.readI32();
        struct.setFlightIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

