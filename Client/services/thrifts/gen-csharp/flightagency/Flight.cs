/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace flightagency
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Flight : TBase
  {
    private int _id;
    private string _destination;
    private string _departureDate;
    private string _departureTime;
    private string _airport;
    private int _availableSeats;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string Destination
    {
      get
      {
        return _destination;
      }
      set
      {
        __isset.destination = true;
        this._destination = value;
      }
    }

    public string DepartureDate
    {
      get
      {
        return _departureDate;
      }
      set
      {
        __isset.departureDate = true;
        this._departureDate = value;
      }
    }

    public string DepartureTime
    {
      get
      {
        return _departureTime;
      }
      set
      {
        __isset.departureTime = true;
        this._departureTime = value;
      }
    }

    public string Airport
    {
      get
      {
        return _airport;
      }
      set
      {
        __isset.airport = true;
        this._airport = value;
      }
    }

    public int AvailableSeats
    {
      get
      {
        return _availableSeats;
      }
      set
      {
        __isset.availableSeats = true;
        this._availableSeats = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool destination;
      public bool departureDate;
      public bool departureTime;
      public bool airport;
      public bool availableSeats;
    }

    public Flight() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Destination = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                DepartureDate = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                DepartureTime = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Airport = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                AvailableSeats = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Flight");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.id) {
          field.Name = "id";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Id);
          oprot.WriteFieldEnd();
        }
        if (Destination != null && __isset.destination) {
          field.Name = "destination";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Destination);
          oprot.WriteFieldEnd();
        }
        if (DepartureDate != null && __isset.departureDate) {
          field.Name = "departureDate";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DepartureDate);
          oprot.WriteFieldEnd();
        }
        if (DepartureTime != null && __isset.departureTime) {
          field.Name = "departureTime";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DepartureTime);
          oprot.WriteFieldEnd();
        }
        if (Airport != null && __isset.airport) {
          field.Name = "airport";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Airport);
          oprot.WriteFieldEnd();
        }
        if (__isset.availableSeats) {
          field.Name = "availableSeats";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(AvailableSeats);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Flight(");
      bool __first = true;
      if (__isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Destination != null && __isset.destination) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Destination: ");
        __sb.Append(Destination);
      }
      if (DepartureDate != null && __isset.departureDate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DepartureDate: ");
        __sb.Append(DepartureDate);
      }
      if (DepartureTime != null && __isset.departureTime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DepartureTime: ");
        __sb.Append(DepartureTime);
      }
      if (Airport != null && __isset.airport) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Airport: ");
        __sb.Append(Airport);
      }
      if (__isset.availableSeats) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AvailableSeats: ");
        __sb.Append(AvailableSeats);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
